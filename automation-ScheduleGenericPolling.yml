args:
- description: List of IDs to poll
  isArray: true
  name: ids
  required: true
- description: Name of the polling command to run
  name: pollingCommand
  required: true
- defaultValue: ids
  description: Name of the argument of the polling command
  name: pollingCommandArgName
  required: true
- description: DT filter for polling IDs
  name: dt
  required: true
- description: The ID of the playbook that contains the manual task which will be
    completed once the polling is done.
  name: playbookId
- defaultValue: "1"
  description: Polling frequency - how often the polling command should run (minutes)
  name: interval
  required: true
- defaultValue: "60"
  description: How much time to poll before declaring a timeout and resuming the playbook
    (minutes)
  name: timeout
  required: true
- defaultValue: polling
  description: The tag of the blocking manual task ("Wait For Polling Task To Finish")
  name: tag
  required: true
- description: Names of additional arguments for the polling command (e.g. arg1,arg2,...)
  isArray: true
  name: additionalPollingCommandArgNames
- description: Values of the additional arguments for the polling command (e.g. value1,value2,...)
  isArray: true
  name: additionalPollingCommandArgValues
comment: Called by the GenericPolling playbook, schedules the polling task.
commonfields:
  id: ScheduleGenericPolling
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.11.59
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.10.48392
enabled: true
engineinfo: {}
mainengineinfo: {}
name: ScheduleGenericPolling
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('ScheduleGenericPolling', 'start', __line__())




  # Returns a comma-separated string representation of a list
  # Possible inputs: null, int, str, bytes, ["","",...], [int, int], 'a,b,...', '"a","b",...', '["","",...]'
  def parseIds(idsArg):
      if idsArg is None:
          return
      if isinstance(idsArg, list):
          return ','.join(map(str, idsArg))
      if isinstance(idsArg, str):
          return ','.join(argToList(idsArg))
      if isinstance(idsArg, bytes):
          return ','.join(argToList(idsArg.decode('utf-8')))
      return str(idsArg)


  def main():
      args = demisto.args()
      ids = parseIds(args.get('ids'))
      dt = args.get('dt')
      pollingCommand = args.get('pollingCommand')
      pollingCommandArgName = args.get('pollingCommandArgName')
      tag = args.get('tag')
      playbookId = f' playbookId="{args.get("playbookId","")}"'
      interval = int(args.get('interval'))
      timeout = int(args.get('timeout'))

      args_names = args.get('additionalPollingCommandArgNames').strip() \
          if args.get('additionalPollingCommandArgNames') else None
      args_values = args.get('additionalPollingCommandArgValues').strip() \
          if args.get('additionalPollingCommandArgValues') else None

      if interval <= 0 or timeout <= 0:
          return_error("Interval and timeout must be positive numbers")

      # Verify correct dt path (does not verify condition!)
      if not demisto.dt(demisto.context(), dt):
          if not demisto.dt(demisto.context(), re.sub('\(.*\)', '', dt)):
              return_error("Incorrect dt path: no ids found")
          demisto.results("Warning: no ids matching the dt condition were found.\nVerify that the condition is correct and "
                          "that all ids have finished running.")
      command_string = '''!GenericPollingScheduledTask pollingCommand="{0}" pollingCommandArgName="{1}"{2} ids="{3}" \
                          pendingIds="{4}" interval="{5}" timeout="{6}" tag="{7}" additionalPollingCommandArgNames="{8}" \
                          additionalPollingCommandArgValues="{9}"'''.format(pollingCommand, pollingCommandArgName, playbookId,
                                                                            ids.replace('"', r'\"'), dt.replace('"', r'\"'),
                                                                            interval, timeout, tag, args_names, args_values)
      res = demisto.executeCommand("ScheduleCommand",
                                   {
                                       'command': command_string,
                                       'cron': f'*/{interval} * * * *',
                                       'times': 1
                                   })
      if isError(res[0]):
          return_error(res)


  if __name__ in ("__main__", "__builtin__", "builtins"):
      main()

  register_module_line('ScheduleGenericPolling', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags: []
type: python
