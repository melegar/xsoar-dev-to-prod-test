args:
- auto: PREDEFINED
  description: How many days back to fetch for, supports 1,2,3 or 7 days back.
  name: days_back
  predefined:
  - "1"
  - "2"
  - "3"
  - "7"
  required: true
- auto: PREDEFINED
  defaultValue: csv
  description: Type of File to return, either JSON, or CSV
  name: output
  predefined:
  - csv
  - json
comment: Uses the Demisto REST API integration to query the server audit trail logs,
  and return back a CSV or JSON file.
commonfields:
  id: ExportAuditLogsToFile
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.5.0
    itemVersion: 1.11.59
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dependson:
  must:
  - demisto-api-post
dockerimage: demisto/python3:3.10.9.45313
enabled: true
engineinfo: {}
mainengineinfo: {}
name: ExportAuditLogsToFile
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('ExportAuditLogsToFile', 'start', __line__())
  import csv
  import io
  import json
  from datetime import date, timedelta





  def main():   # pragma: no cover
      # get the file type
      file_type = demisto.args().get("output")

      # set time back for fetching
      fetch_back_date = date.today() - timedelta(days=int(demisto.args().get("days_back")))
      fetch_from = fetch_back_date.strftime("%Y-%m-%dT00:00:00Z")
      file_date = fetch_back_date.strftime("%Y-%m-%d")

      # body of the request
      body = {
          'fromDate': fetch_from,
          'query': "",
          'page': 0,
          'size': 100
      }

      # get the logs
      res = demisto.executeCommand("demisto-api-post", {"uri": "/settings/audits", "body": body})[0]["Contents"][
          "response"]

      # set the initial counts
      total = res.get('total', 0)
      audits = res.get('audits', [])
      count = 1

      # if there are more events than the default size, page through and get them all
      while len(audits) < total:
          body['page'] = count
          res = demisto.executeCommand("demisto-api-post", {"uri": "/settings/audits", "body": body})[0]["Contents"][
              "response"]
          audits.extend(res.get('audits', []))
          count += 1
          # break if this goes crazy, if there are more than 100 pages of audit log entries.
          if count == 100:
              break

      if file_type == "csv":
          # write the results to a CSV
          si = io.StringIO()
          cw = csv.writer(si)

          # write header row
          cw.writerow(["Log"])

          # write the rows for each asset
          for audit in audits:
              cw.writerow([audit, ])

          # return the file
          data = si.getvalue().strip('\r\n')
          demisto.results(fileResult(f"xsoar-audit-logs-{file_date}.csv", data.encode('utf-8')))
      else:
          demisto.results(fileResult(f"xsoar-audit-logs-{file_date}.json", json.dumps(audits)))

      # return the results
      demisto.results(f"Fetched {len(audits)} audit log events since {fetch_from}")


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('ExportAuditLogsToFile', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- Utility
type: python
